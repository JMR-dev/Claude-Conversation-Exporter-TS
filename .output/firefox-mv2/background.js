var background=(function(){"use strict";const t=globalThis.browser?.runtime?.id?globalThis.browser:globalThis.chrome;function i(r){return r==null||typeof r=="function"?{main:r}:r}const a=i(()=>{console.log("Claude Conversation Exporter background script loaded"),t.runtime.onInstalled.addListener(()=>{console.log("Claude Conversation Exporter installed"),(async()=>{try{const r=await t.tabs.query({url:"https://claude.ai/*"});for(const e of r)if(e.id)try{await t.scripting.executeScript({target:{tabId:e.id},files:["content-scripts/content.js"]})}catch(n){console.log("Could not inject into tab",e.id,n)}}catch(r){console.error("Error querying or injecting tabs:",r)}})()}),t.runtime.onMessage.addListener((r,e)=>r.action==="ensureContentScript"?(async()=>{try{const c=(await t.tabs.query({active:!0,currentWindow:!0}))[0];return c?.id?(await t.scripting.executeScript({target:{tabId:c.id},files:["content-scripts/content.js"]}),{success:!0}):{success:!1,error:"No active tab found"}}catch(n){return{success:!1,error:n instanceof Error?n.message:"Unknown error"}}})():!1)});function d(){}function o(r,...e){}const u={debug:(...r)=>o(console.debug,...r),log:(...r)=>o(console.log,...r),warn:(...r)=>o(console.warn,...r),error:(...r)=>o(console.error,...r)};let s;try{s=a.main(),s instanceof Promise&&console.warn("The background's main() function return a promise, but it must be synchronous")}catch(r){throw u.error("The background crashed on startup!"),r}return s})();
